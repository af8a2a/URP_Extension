#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
// #include "Packages/com.unity.render-pipelines.universal//ShaderLibrary/Core.hlsl"
#include "PostProcessDefines.hlsl"
#include "DepthOfFieldCommon.hlsl"

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch


#pragma kernel KMainCoCPhysical

CBUFFER_START(cb0)
    float4 _Params;
    float4 _Params2;
CBUFFER_END

#define FarStart        _Params.x
#define NearEnd         _Params.y
#define FarRange        _Params.z   // 1 / (FarEnd - FarStart)
#define NearRange       _Params.w   // 1 / (NearStart - NearEnd)
#define NearMaxRadius   _Params2.x
#define FarMaxRadius    _Params2.y


// outpute texture
RWTexture2D<float> _OutputTexture;

#define GROUP_RES  8u
#define GROUP_SIZE (GROUP_RES * GROUP_RES)

float GetFixedNearBlend(float linearEyeDepth)
{
    return 1.0 - saturate(linearEyeDepth / (NearEnd * NearEnd));
}

[numthreads(GROUP_RES, GROUP_RES, 1)]
void KMainCoCPhysical(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _ScreenSize.zw,
                                                uint2(GROUP_RES, GROUP_RES));

    float depth = CameraDepth(posInputs.positionSS);

    // Note: the linearization of the depth is encoded directly in the MAD parameters
    float CoC = _Params.w - _Params.z * depth;


    if (CoC > 0)
    {
        const float maxFarCoC = _Params.x;
        // CoC clamping for the far field
        CoC = min(CoC, maxFarCoC);
    }
    else
    {
        const float maxNearCoC = _Params.y;
        // CoC clamping for the near field
        CoC = max(CoC, -maxNearCoC);
    }

    _OutputTexture[posInputs.positionSS] = CoC;
}
