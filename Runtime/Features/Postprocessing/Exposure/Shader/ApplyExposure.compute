#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma kernel KMain
#pragma multi_compile _ ENABLE_ALPHA

#include "Packages/com.unity.render-pipelines.universal.extension/ShaderLibrary/PostProcess/PostProcessDefines.hlsl"

TEXTURE2D(_InputTexture);
RW_TEXTURE2D(CTYPE, _OutputTexture);

TEXTURE2D(_ExposureTexture);
TEXTURE2D(_PrevExposureTexture);
float _ProbeExposureScale;


float GetCurrentExposureMultiplier()
{
    #if SHADEROPTIONS_PRE_EXPOSITION
    // _ProbeExposureScale is a scale used to perform range compression to avoid saturation of the content of the probes. It is 1.0 if we are not rendering probes.
    return LOAD_TEXTURE2D(_ExposureTexture, int2(0, 0)).x * _ProbeExposureScale;
    #else
    return _ProbeExposureScale;
    #endif
}

float GetPreviousExposureMultiplier()
{
    #if SHADEROPTIONS_PRE_EXPOSITION
    // _ProbeExposureScale is a scale used to perform range compression to avoid saturation of the content of the probes. It is 1.0 if we are not rendering probes.
    return LOAD_TEXTURE2D(_PrevExposureTexture, int2(0, 0)).x * _ProbeExposureScale;
    #else
    return _ProbeExposureScale;
    #endif
}


[numthreads(8,8,1)]
void KMain(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float exposure = GetCurrentExposureMultiplier();
    CTYPE color = LOAD_TEXTURE2D(_InputTexture, dispatchThreadId.xy).CTYPE_SWIZZLE;
    color.xyz *= exposure;
    _OutputTexture[dispatchThreadId.xy] = color;
}
