#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma kernel TemporalDenoise
#pragma multi_compile _ HDROutput

#define RADIUS      1
#define GROUP_SIZE  16
#define TILE_DIM    (2 * RADIUS + GROUP_SIZE)

groupshared float3 Tile[TILE_DIM * TILE_DIM];


TEXTURE2D_X(ColorBuffer);
TEXTURE2D_X(DepthBuffer);
TEXTURE2D_X(VelocityBuffer);
TEXTURE2D_X(HistoryBuffer);
RWTexture2D<float4> OutputBuffer;

float4 TAAJitter;
float4 TAA_BlendParameter; // x: static, y: dynamic, z: motion amplification, w: temporalScale
#define Static TAA_BlendParameter.x
#define Dynamic TAA_BlendParameter.y
#define Amplification TAA_BlendParameter.z
#define TemporalScale TAA_BlendParameter.w


static const half TONEMAP_EPSILON = 1.0f / 65530.0f;
static const int2 SampleOffsets[9] = {
    int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(0, 0), int2(1, 0), int2(-1, 1), int2(0, 1), int2(1, 1)
};
static const int2 NeighborOffsets[8] = {
    int2(-1, -1), int2(0, -1), int2(1, -1), int2(-1, 0), int2(1, 1), int2(1, 0), int2(-1, 1), int2(0, -1)
};

float HdrWeightY(float Color, float Exposure)
{
    return rcp(Color * Exposure + 4);
}

float min3(float a, float b, float c)
{
    return min(min(a, b), c);
}

float3 SampleHistoryCatmullRom(in float2 uv, in float2 texelSize)
{
    // Source: https://gist.github.com/TheRealMJP/c83b8c0f46b63f3a88a5986f4fa982b1
    // License: https://gist.github.com/TheRealMJP/bc503b0b87b643d3505d41eab8b332ae

    // We're going to sample a a 4x4 grid of texels surrounding the target UV coordinate. We'll do this by rounding
    // down the sample location to get the exact center of our "starting" texel. The starting texel will be at
    // location [1, 1] in the grid, where [0, 0] is the top left corner.
    float2 samplePos = uv / texelSize;
    float2 texPos1 = floor(samplePos - 0.5f) + 0.5f;

    // Compute the fractional offset from our starting texel to our original sample location, which we'll
    // feed into the Catmull-Rom spline function to get our filter weights.
    float2 f = samplePos - texPos1;

    // Compute the Catmull-Rom weights using the fractional offset that we calculated earlier.
    // These equations are pre-expanded based on our knowledge of where the texels will be located,
    // which lets us avoid having to evaluate a piece-wise function.
    float2 w0 = f * (-0.5f + f * (1.0f - 0.5f * f));
    float2 w1 = 1.0f + f * f * (-2.5f + 1.5f * f);
    float2 w2 = f * (0.5f + f * (2.0f - 1.5f * f));
    float2 w3 = f * f * (-0.5f + 0.5f * f);

    // Work out weighting factors and sampling offsets that will let us use bilinear filtering to
    // simultaneously evaluate the middle 2 samples from the 4x4 grid.
    float2 w12 = w1 + w2;
    float2 offset12 = w2 / (w1 + w2);

    // Compute the final UV coordinates we'll use for sampling the texture
    float2 texPos0 = texPos1 - 1.0f;
    float2 texPos3 = texPos1 + 2.0f;
    float2 texPos12 = texPos1 + offset12;

    texPos0 *= texelSize;
    texPos3 *= texelSize;
    texPos12 *= texelSize;

    float3 result = float3(0.0f, 0.0f, 0.0f);

    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos0.x, texPos0.y), 0.0f).xyz * w0.x * w0.y;
    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos12.x, texPos0.y), 0.0f).xyz * w12.x * w0.y;
    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos3.x, texPos0.y), 0.0f).xyz * w3.x * w0.y;
    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos0.x, texPos12.y), 0.0f).xyz * w0.x * w12.y;
    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos12.x, texPos12.y), 0.0f).xyz * w12.x * w12.y;
    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos3.x, texPos12.y), 0.0f).xyz * w3.x * w12.y;
    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos0.x, texPos3.y), 0.0f).xyz * w0.x * w3.y;
    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos12.x, texPos3.y), 0.0f).xyz * w12.x * w3.y;
    result += HistoryBuffer.SampleLevel(sampler_LinearClamp, float2(texPos3.x, texPos3.y), 0.0f).xyz * w3.x * w3.y;

    return max(result, 0.0f);
}



#define BICUBIC_CATMULL_ROM_SAMPLES 5

struct FCatmullRomSamples
{
    // Constant number of samples (BICUBIC_CATMULL_ROM_SAMPLES)
    uint Count;

    // Constant sign of the UV direction from master UV sampling location.
    int2 UVDir[BICUBIC_CATMULL_ROM_SAMPLES];

    // Bilinear sampling UV coordinates of the samples
    float2 UV[BICUBIC_CATMULL_ROM_SAMPLES];

    // Weights of the samples
    float Weight[BICUBIC_CATMULL_ROM_SAMPLES];

    // Final multiplier (it is faster to multiply 3 RGB values than reweights the 5 weights)
    float FinalMultiplier;
};


void Bicubic2DCatmullRom(in float2 UV, in float2 Size, in float2 InvSize, out float2 Sample[3], out float2 Weight[3])
{
    UV *= Size;

    float2 tc = floor(UV - 0.5) + 0.5;
    float2 f = UV - tc;
    float2 f2 = f * f;
    float2 f3 = f2 * f;

    float2 w0 = f2 - 0.5 * (f3 + f);
    float2 w1 = 1.5 * f3 - 2.5 * f2 + 1;
    float2 w3 = 0.5 * (f3 - f2);
    float2 w2 = 1 - w0 - w1 - w3;

    Weight[0] = w0;
    Weight[1] = w1 + w2;
    Weight[2] = w3;

    Sample[0] = tc - 1;
    Sample[1] = tc + w2 / Weight[1];
    Sample[2] = tc + 2;

    Sample[0] *= InvSize;
    Sample[1] *= InvSize;
    Sample[2] *= InvSize;
}

FCatmullRomSamples GetBicubic2DCatmullRomSamples(float2 UV, float2 Size, in float2 InvSize)
{
    FCatmullRomSamples Samples;
    Samples.Count = BICUBIC_CATMULL_ROM_SAMPLES;

    float2 Weight[3];
    float2 Sample[3];
    Bicubic2DCatmullRom(UV, Size, InvSize, Sample, Weight);

    // Optimized by removing corner samples
    Samples.UV[0] = float2(Sample[1].x, Sample[0].y);
    Samples.UV[1] = float2(Sample[0].x, Sample[1].y);
    Samples.UV[2] = float2(Sample[1].x, Sample[1].y);
    Samples.UV[3] = float2(Sample[2].x, Sample[1].y);
    Samples.UV[4] = float2(Sample[1].x, Sample[2].y);

    Samples.Weight[0] = Weight[1].x * Weight[0].y;
    Samples.Weight[1] = Weight[0].x * Weight[1].y;
    Samples.Weight[2] = Weight[1].x * Weight[1].y;
    Samples.Weight[3] = Weight[2].x * Weight[1].y;
    Samples.Weight[4] = Weight[1].x * Weight[2].y;

    Samples.UVDir[0] = int2(0, -1);
    Samples.UVDir[1] = int2(-1, 0);
    Samples.UVDir[2] = int2(0, 0);
    Samples.UVDir[3] = int2(1, 0);
    Samples.UVDir[4] = int2(0, 1);

    // Reweight after removing the corners
    float CornerWeights;
    CornerWeights = Samples.Weight[0];
    CornerWeights += Samples.Weight[1];
    CornerWeights += Samples.Weight[2];
    CornerWeights += Samples.Weight[3];
    CornerWeights += Samples.Weight[4];
    Samples.FinalMultiplier = 1 / CornerWeights;

    return Samples;
}

float4 Texture2DSampleBicubic(Texture2D Tex, SamplerState Sampler, float2 UV, float2 Size, in float2 InvSize)
{
    FCatmullRomSamples Samples = GetBicubic2DCatmullRomSamples(UV, Size, InvSize);

    float4 OutColor = 0;
    
    [unroll]
    for (uint i = 0; i < Samples.Count; i++)
    {
        OutColor += Tex.SampleLevel(Sampler, Samples.UV[i], 0) * Samples.Weight[i];
    }
    OutColor *= Samples.FinalMultiplier;

    return OutColor;
}



float3 ClipAABB(float3 color, float3 aabbMin, float3 aabbMax)
{
    #if 0
    // Note: only clips towards aabb center (but fast!)
    float3 center = 0.5 * (aabbMax + aabbMin);
    float3 extents = 0.5 * (aabbMax - aabbMin);

    // This is actually `distance`, however the keyword is reserved
    float3 offset = color - center;

    float3 ts = abs(offset / extents);
    float t = max3(ts.x, ts.y, ts.z);

    return t > 1 ? center + offset / t : color;
    #else
    // Note: only clips towards aabb center (but fast!)
    float3 center = 0.5 * (aabbMax + aabbMin);
    float3 extents = 0.5 * (aabbMax - aabbMin);

    // This is actually `distance`, however the keyword is reserved
    float3 offset = color - center;

    float3 ts = abs(extents / (offset + 0.0001));
    float t = saturate(min3(ts.x, ts.y, ts.z));
    return center + offset * t;
    #endif
}

#if defined(UNITY_REVERSED_Z)
#define COMPARE_DEPTH(a, b) step(b, a)
#else
    #define COMPARE_DEPTH(a, b) step(a, b)
#endif

float3 Tonemap(float3 fRgb)
{
    return fRgb / (max(max(0.f, fRgb.r), max(fRgb.g, fRgb.b)) + 1.f).xxx;
}

float3 InverseTonemap(float3 fRgb)
{
    return fRgb / max(TONEMAP_EPSILON, 1.f - max(fRgb.r, max(fRgb.g, fRgb.b))).xxx;
}

float2 GetClosestFragment(float2 uv, in float2 texelSize, float currDepth)
{
    float neighborhood[9];
    [unroll]
    for (uint i = 0; i < 8; ++i)
    {
        neighborhood[i] = DepthBuffer.SampleLevel(sampler_PointClamp, uv, 0, NeighborOffsets[i]).r;
    }

    float3 result = currDepth;

    [unroll]
    for (uint j = 0; j < 8; ++j)
    {
        result = lerp(result, float3(NeighborOffsets[j], neighborhood[j]), COMPARE_DEPTH(neighborhood[j], result.z));
    }

    return (uv + result.xy * texelSize);
}

[numthreads(16, 16, 1)]
void TemporalDenoise(uint3 id : SV_DispatchThreadID)
{
    float4 TAA_Resolution;
    ColorBuffer.GetDimensions(TAA_Resolution.x, TAA_Resolution.y);
    TAA_Resolution.zw = rcp(TAA_Resolution.xy);
    float2 screenUV = (id.xy + 0.5) * TAA_Resolution.zw;

    float currDepth = DepthBuffer.SampleLevel(sampler_PointClamp, screenUV, 0).r;
    float2 velocity = VelocityBuffer.SampleLevel(sampler_LinearClamp,
                                                 GetClosestFragment(screenUV, currDepth, TAA_Resolution.zw), 0).xy;
    //float lastDepth = SRV_HistoryDepthTexture.SampleLevel(Global_point_clamp_sampler, screenUV - velocity, 0).r;
    float3 lastColor = SampleHistoryCatmullRom(screenUV - velocity, TAA_Resolution.zw).rgb;
    lastColor =Texture2DSampleBicubic(HistoryBuffer, sampler_LinearClamp, screenUV - velocity, TAA_Resolution.xy, TAA_Resolution.zw).rgb;
    lastColor = RGBToYCoCg(Tonemap(lastColor));

    float3 sampleColors[9];

    [unroll]
    for (uint i = 0; i < 9; ++i)
    {
        sampleColors[i] = ColorBuffer.SampleLevel(sampler_LinearClamp, screenUV - TAAJitter.xy,
                                                  0, SampleOffsets[i]).rgb;
        sampleColors[i] = RGBToYCoCg(Tonemap(sampleColors[i]));
    }

    #if 1
    float totalWeight = 0;
    float3 totalColor = 0;

    [unroll]
    for (uint j = 0; j < 9; ++j)
    {
        float weight = HdrWeightY(sampleColors[j].r, 10);
        totalWeight += weight;
        totalColor += sampleColors[j] * weight;
    }
    totalColor /= totalWeight;
    #else
    float3 totalColor = sampleColors[4];
    #endif

    float3 m1 = 0;
    float3 m2 = 0;

    [unroll]
    for (uint x = 0; x < 9; ++x)
    {
        m1 += sampleColors[x];
        m2 += sampleColors[x] * sampleColors[x];
    }

    float3 mean = m1 / 9;
    float3 stddev = sqrt((m2 / 9) - pow(mean, 2));

    //TAA_BlendParameter.w *= (((currDepth - lastDepth) * 10) > 0.001) ? 0 : 1;
    float3 minColor = mean - TemporalScale * stddev;
    float3 maxColor = mean + TemporalScale * stddev;

    minColor = min(minColor, totalColor);
    maxColor = max(maxColor, totalColor);

    float3 corners = ((sampleColors[0] + sampleColors[8] + sampleColors[2] + sampleColors[6]) - totalColor) * 2;

    // Sharpen output
    totalColor += (totalColor - (corners * 0.167)) * 2.718 * 0.5; //0.5 is sharpness
    totalColor = clamp(totalColor, 0.0, 65472);

    lastColor = ClipAABB(lastColor, minColor, maxColor);

    float weight = clamp(lerp(Static, Dynamic, length(velocity) * Amplification),
                         Dynamic, TemporalScale);

    #if defined(HDROutput)
    OutputBuffer[id.xy] = float4(clamp(InverseTonemap(YCoCgToRGB(lerp(totalColor, lastColor, weight))), 0.0,
                                       65472), 1.0);
    #else
    OutputBuffer[id.xy] = LinearToSRGB(float4(clamp(InverseTonemap(YCoCgToRGB(lerp(totalColor, lastColor, weight))), 0.0,
                                       65472), 1.0));
    #endif
}
