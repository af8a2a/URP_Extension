/*
 * Copyright (c) 2014-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2014-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */


#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GlobalSamplers.hlsl"
#pragma kernel KMain

#define KERNEL_RADIUS 3

Texture2D<float2> AODepthInput;
RWTexture2D<float2> SSAOOutput;

float Sharpness;
float2 InvResolutionDirection;
//-------------------------------------------------------------------------

float BlurFunction(float2 uv, float r, float center_c, float center_d, inout float w_total)
{
    float2 aoz = AODepthInput.SampleLevel(sampler_LinearClamp, uv, 0).xy;
    float c = aoz.x;
    float d = aoz.y;

    const float BlurSigma = float(KERNEL_RADIUS) * 0.5;
    const float BlurFalloff = 1.0 / (2.0 * BlurSigma * BlurSigma);

    float ddiff = (d - center_d) * Sharpness;
    float w = exp2(-r * r * BlurFalloff - ddiff * ddiff);
    w_total += w;

    return c * w;
}

[numthreads(8, 8, 1)]
void KMain(uint3 tid : SV_DispatchThreadID)
{
    int2 coord = tid.xy;
    float2 baseuv = ((float2)(coord.xy) + 0.5f) * _ScreenSize.zw;
    float2 aoz = AODepthInput[coord].xy;;
    float center_c = aoz.x;
    float center_d = aoz.y;

    float c_total = center_c;
    float w_total = 1.0;

    for (float r = 1; r <= KERNEL_RADIUS; ++r)
    {
        float2 uv = baseuv + InvResolutionDirection * r;
        c_total += BlurFunction(uv, r, center_c, center_d, w_total);
    }

    for (float r = 1; r <= KERNEL_RADIUS; ++r)
    {
        float2 uv = baseuv - InvResolutionDirection * r;
        c_total += BlurFunction(uv, r, center_c, center_d, w_total);
    }

    SSAOOutput[coord] = float2(c_total / w_total, center_d);
}
