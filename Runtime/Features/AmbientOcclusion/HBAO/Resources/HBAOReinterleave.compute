#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GlobalSamplers.hlsl"

#pragma kernel KMain

Texture2DArray<float2> DeinterleaveAOInput;
RWTexture2D<float2> ReinterleaveOutput;


float2 Prepare_Load(int2 coord, int slice)
{
    float2 color = DeinterleaveAOInput[int3(coord, slice)];
    return color;
}

void Prepare_Store(int2 coord, float2 ao)
{
    ReinterleaveOutput[coord] = ao;
}

static int2 ReinterleavePattern[] = {
    int2(0, 0),
    int2(1, 0),
    int2(0, 1),
    int2(1, 1),
    // int2(2, 0),
    // int2(2, 1),
    // int2(3, 0),
    // int2(3, 1),
    // int2(0, 2),
    // int2(1, 2),
    // int2(0, 3),
    // int2(1, 3),
    // int2(2, 2),
    // int2(2, 3),
    // int2(3, 2),
    // int2(3, 3),
};

[numthreads(8,8,1)]
void KMain(uint3 tid : SV_DispatchThreadID)
{
    int2 baseCoord = tid.xy;
    Prepare_Store(tid * 2 + ReinterleavePattern[0], Prepare_Load(baseCoord, 0));
    Prepare_Store(tid * 2 + ReinterleavePattern[1], Prepare_Load(baseCoord, 1));
    Prepare_Store(tid * 2 + ReinterleavePattern[2], Prepare_Load(baseCoord, 2));
    Prepare_Store(tid * 2 + ReinterleavePattern[3], Prepare_Load(baseCoord, 3));

    // Prepare_Store(tid * 4 + ReinterleavePattern[4], Prepare_Load(baseCoord, 4));
    // Prepare_Store(tid * 4 + ReinterleavePattern[5], Prepare_Load(baseCoord, 5));
    // Prepare_Store(tid * 4 + ReinterleavePattern[6], Prepare_Load(baseCoord, 6));
    // Prepare_Store(tid * 4 + ReinterleavePattern[7], Prepare_Load(baseCoord, 7));
    //
    // Prepare_Store(tid * 4 + ReinterleavePattern[8], Prepare_Load(baseCoord, 8));
    // Prepare_Store(tid * 4 + ReinterleavePattern[9], Prepare_Load(baseCoord, 9));
    // Prepare_Store(tid * 4 + ReinterleavePattern[10], Prepare_Load(baseCoord, 10));
    // Prepare_Store(tid * 4 + ReinterleavePattern[11], Prepare_Load(baseCoord, 11));
    //
    // Prepare_Store(tid * 4 + ReinterleavePattern[12], Prepare_Load(baseCoord, 12));
    // Prepare_Store(tid * 4 + ReinterleavePattern[13], Prepare_Load(baseCoord, 13));
    // Prepare_Store(tid * 4 + ReinterleavePattern[14], Prepare_Load(baseCoord, 14));
    // Prepare_Store(tid * 4 + ReinterleavePattern[15], Prepare_Load(baseCoord, 15));
}
